//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace DataModel
{
	/// <summary>
	/// Database       : HealthBot
	/// Data Source    : tcp://localhost:5432
	/// Server Version : 16.0
	/// </summary>
	public partial class HealthBotDB : LinqToDB.Data.DataConnection
	{
		public ITable<DiaryEntry> DiaryEntrys { get { return this.GetTable<DiaryEntry>(); } }
		public ITable<IntakeItem> IntakeItems { get { return this.GetTable<IntakeItem>(); } }
		public ITable<User>       Users       { get { return this.GetTable<User>(); } }

		partial void InitMappingSchema()
		{
		}

		public HealthBotDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public HealthBotDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public HealthBotDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public HealthBotDB(DataOptions<HealthBotDB> options)
			: base(options.Options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="public", Name="DiaryEntrys")]
	public partial class DiaryEntry
	{
		[Column("uuid",             DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                  PrimaryKey,  NotNull] public Guid           Uuid            { get; set; } // uuid
		[Column("author",           DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                               NotNull] public Guid           Author          { get; set; } // uuid
		[Column("type",             DbType="text",                         DataType=LinqToDB.DataType.Text),                                               NotNull] public string         Type            { get; set; } // text
		[Column("heart_rate",       DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?           HeartRate       { get; set; } // integer
		[Column("blood_saturation", DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?           BloodSaturation { get; set; } // integer
		[Column("blood_preassure",  DbType="text",                         DataType=LinqToDB.DataType.Text),                                     Nullable         ] public string         BloodPreassure  { get; set; } // text
		[Column("created_at",       DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset CreatedAt       { get; set; } // timestamp (6) with time zone
		[Column("updated_at",       DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset UpdatedAt       { get; set; } // timestamp (6) with time zone
		[Column("deleted_at",       DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset DeletedAt       { get; set; } // timestamp (6) with time zone

		#region Associations

		/// <summary>
		/// DiaryEntry_BackReference (public.IntakeItems)
		/// </summary>
		[Association(ThisKey="Uuid", OtherKey="DiaryEntry", CanBeNull=true)]
		public IEnumerable<IntakeItem> DiaryEntries { get; set; }

		/// <summary>
		/// Author (public.Users)
		/// </summary>
		[Association(ThisKey="Author", OtherKey="Uuid", CanBeNull=false)]
		public User FKAuthor { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="IntakeItems")]
	public partial class IntakeItem
	{
		[Column("uuid",          DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                  PrimaryKey,  NotNull] public Guid           Uuid         { get; set; } // uuid
		[Column("name",          DbType="text",                         DataType=LinqToDB.DataType.Text),                                               NotNull] public string         Name         { get; set; } // text
		[Column("calory_amount", DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?           CaloryAmount { get; set; } // integer
		[Column("tags",          DbType="text",                         DataType=LinqToDB.DataType.Text),                                     Nullable         ] public string         Tags         { get; set; } // text
		[Column("state",         DbType="text",                         DataType=LinqToDB.DataType.Text),                                               NotNull] public string         State        { get; set; } // text
		[Column("weight",        DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?           Weight       { get; set; } // integer
		[Column("diary_entry",   DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                               NotNull] public Guid           DiaryEntry   { get; set; } // uuid
		[Column("created_at",    DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset CreatedAt    { get; set; } // timestamp (6) with time zone
		[Column("updated_at",    DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset UpdatedAt    { get; set; } // timestamp (6) with time zone
		[Column("deleted_at",    DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),                        NotNull] public DateTimeOffset DeletedAt    { get; set; } // timestamp (6) with time zone

		#region Associations

		/// <summary>
		/// DiaryEntry (public.DiaryEntrys)
		/// </summary>
		[Association(ThisKey="DiaryEntry", OtherKey="Uuid", CanBeNull=false)]
		public DiaryEntry FKDiaryEntry { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Users")]
	public partial class User
	{
		[Column("uuid",               DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                  PrimaryKey,  NotNull] public Guid            Uuid              { get; set; } // uuid
		[Column("name",               DbType="text",                         DataType=LinqToDB.DataType.Text),                                     Nullable         ] public string          Name              { get; set; } // text
		[Column("alias",              DbType="text",                         DataType=LinqToDB.DataType.Text),                                     Nullable         ] public string          Alias             { get; set; } // text
		[Column("chat_id",            DbType="bigint",                       DataType=LinqToDB.DataType.Int64,          Precision=64, Scale=0),              NotNull] public long            ChatId            { get; set; } // bigint
		[Column("age",                DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?            Age               { get; set; } // integer
		[Column("sex",                DbType="text",                         DataType=LinqToDB.DataType.Text),                                     Nullable         ] public string          Sex               { get; set; } // text
		[Column("weight",             DbType="integer",                      DataType=LinqToDB.DataType.Int32,          Precision=32, Scale=0),    Nullable         ] public int?            Weight            { get; set; } // integer
		[Column("doctor_Id",          DbType="uuid",                         DataType=LinqToDB.DataType.Guid),                                     Nullable         ] public Guid?           DoctorId          { get; set; } // uuid
		[Column("subscription_end",   DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),              Nullable         ] public DateTimeOffset? SubscriptionEnd   { get; set; } // timestamp (6) with time zone
		[Column("subscription_start", DbType="timestamp (6) with time zone", DataType=LinqToDB.DataType.DateTimeOffset, Precision=6),              Nullable         ] public DateTimeOffset? SubscriptionStart { get; set; } // timestamp (6) with time zone
		[Column("created_at",         DbType="time with time zone",          DataType=LinqToDB.DataType.Time,           Precision=6),                        NotNull] public DateTimeOffset  CreatedAt         { get; set; } // time with time zone
		[Column("updated_at",         DbType="time with time zone",          DataType=LinqToDB.DataType.Time,           Precision=6),              Nullable         ] public DateTimeOffset? UpdatedAt         { get; set; } // time with time zone
		[Column("deleted_at",         DbType="time with time zone",          DataType=LinqToDB.DataType.Time,           Precision=6),              Nullable         ] public DateTimeOffset? DeletedAt         { get; set; } // time with time zone
		[Column("state",              DbType="\"State\"",                      DataType=LinqToDB.DataType.Enum),                                             NotNull] public string          State             { get; set; } // "State"

		#region Associations

		/// <summary>
		/// Author_BackReference (public.DiaryEntrys)
		/// </summary>
		[Association(ThisKey="Uuid", OtherKey="Author", CanBeNull=true)]
		public IEnumerable<DiaryEntry> Authors { get; set; }

		/// <summary>
		/// DoctorIds (public.Users)
		/// </summary>
		[Association(ThisKey="DoctorId", OtherKey="Uuid", CanBeNull=true)]
		public User Doctor { get; set; }

		/// <summary>
		/// DoctorIds_BackReference (public.Users)
		/// </summary>
		[Association(ThisKey="Uuid", OtherKey="DoctorId", CanBeNull=true)]
		public IEnumerable<User> DoctorIds { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static DiaryEntry Find(this ITable<DiaryEntry> table, Guid Uuid)
		{
			return table.FirstOrDefault(t =>
				t.Uuid == Uuid);
		}

		public static IntakeItem Find(this ITable<IntakeItem> table, Guid Uuid)
		{
			return table.FirstOrDefault(t =>
				t.Uuid == Uuid);
		}

		public static User Find(this ITable<User> table, Guid Uuid)
		{
			return table.FirstOrDefault(t =>
				t.Uuid == Uuid);
		}
	}
}
